package goPshdlRest

import (
	"fmt"
)

// CompilerService handles communication with the compiler related
// methods of the PsHdl REST API.
type CompilerService struct {
	client *Client
	// current workspace Id
	ID string
}

// Validate sends a request for Validation of the workspace
// TODO: Return result of validation
func (s *CompilerService) Validate() error {
	req, err := s.client.NewRequest("POST", fmt.Sprintf("compiler/%s/validate", s.ID), nil)
	if err != nil {
		return err
	}

	_, _, err = s.client.DoPlain(req)
	if err != nil {
		return err
	}

	return nil
}

// SimCodeType represents the different types of simulation code that can be generated by the API
type SimCodeType int

// The different types of sim code
const (
	SimPsex SimCodeType = iota
	SimJava
	SimC
	SimDart
	SimJavaScript
)

// RequestSimCode sends a request for simulation code
// if successfull, it returns the url for downloading the file
func (s *CompilerService) RequestSimCode(ct SimCodeType, moduleName string) (string, error) {
	var reqURL string
	switch ct {
	case SimC:
		reqURL = fmt.Sprintf("compiler/%s/psex/c", s.ID)
	default:
		return "", fmt.Errorf("unsupported SimCodeType:%d", ct)
	}

	req, err := s.client.NewRequest("POST", reqURL, nil)
	if err != nil {
		return "", err
	}

	_, _, err = s.client.DoPlain(req)
	if err != nil {
		return "", err
	}

	return "TODO", nil
}

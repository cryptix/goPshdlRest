package goPshdlRest

import (
	"fmt"
	"net/http"
	"net/url"
	"strings"
)

// CompilerService handles communication with the compiler related
// methods of the PsHdl REST API.
type CompilerService struct {
	client *Client
	// current workspace Id
	ID string
}

// Validate sends a request for Validation of the workspace
// TODO: Return result of validation
func (s *CompilerService) Validate() error {
	req, err := s.client.NewRequest("POST", fmt.Sprintf("compiler/%s/validate", s.ID), nil)
	if err != nil {
		return err
	}

	_, _, err = s.client.DoPlain(req)
	if err != nil {
		return err
	}

	return nil
}

// SimCodeType represents the different types of simulation code that can be generated by the API
type SimCodeType int

// The different types of sim code
const (
	SimPsex SimCodeType = iota
	SimJava
	SimC
	SimDart
	SimJavaScript
)

// RequestSimCode sends a request for simulation code
// if successfull, it returns the url for downloading the file
func (s *CompilerService) RequestSimCode(ct SimCodeType, moduleName string) (string, error) {
	if moduleName == "" {
		return "", fmt.Errorf("missing moduleName")
	}
	var reqURL string
	switch ct {
	case SimC:
		reqURL = fmt.Sprintf("compiler/%s/psex/c", s.ID)
	default:
		return "", fmt.Errorf("unsupported SimCodeType:%d", ct)
	}

	param := url.Values{}
	param.Set("module", moduleName)

	req, err := s.client.NewReaderRequest("POST", reqURL, strings.NewReader(param.Encode()), "")
	if err != nil {
		return "", err
	}

	body, resp, err := s.client.DoPlain(req)
	if err != nil {
		return "", err
	}

	if resp.StatusCode != http.StatusCreated {
		return "", fmt.Errorf("error: RequestSimCode: Code was not created")
	}

	url := string(body)

	if !strings.HasPrefix(url, fmt.Sprintf("/api/v0.1/workspace/%s/src-gen:psex:", s.ID)) {
		return "", fmt.Errorf("error: RequestSimCode: invalid url returned: %s", url)
	}

	url = strings.TrimSpace(url)

	return url, nil
}

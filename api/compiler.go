package pshdlApi

import (
	"bufio"
	"fmt"
	"net/http"
	"net/url"
	"strings"
)

// CompilerService handles communication with the compiler related
// methods of the PsHdl REST API.
type CompilerService struct {
	client *Client
	// current workspace Id
	ID string
}

// Validate sends a request for Validation of the workspace
// TODO: Return result of validation
func (s *CompilerService) Validate() (*Workspace, error) {
	dbg("Compiler.Validate(%s)", s.ID)

	req, err := s.client.NewRequest("POST", fmt.Sprintf("compiler/%s/validate", s.ID), nil)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Accept", "application/json")

	wp := new(Workspace)
	if _, err = s.client.Do(req, wp); err != nil {
		return nil, err
	}

	return wp, nil
}

// SimCodeType represents the different types of simulation code that can be generated by the API
type SimCodeType int

// The different types of sim code
const (
	SimPsex SimCodeType = iota
	SimJava
	SimC
	SimGo
	SimDart
	SimJavaScript
)

// RequestSimCode sends a request for simulation code
// if successfull, it returns the url for downloading the file
func (s *CompilerService) RequestSimCode(ct SimCodeType, moduleName string) (uris []string, err error) {
	dbg("Compiler.Validate(%s) %d %s", s.ID, ct, moduleName)
	if moduleName == "" {
		return nil, fmt.Errorf("missing moduleName")
	}

	var reqURL string
	switch ct {
	case SimC:
		reqURL = fmt.Sprintf("compiler/%s/psex/c", s.ID)
	case SimGo:
		reqURL = fmt.Sprintf("compiler/%s/psex/go", s.ID)
	default:
		return nil, fmt.Errorf("unsupported SimCodeType:%d", ct)
	}

	param := url.Values{}
	param.Set("module", moduleName)

	req, err := s.client.NewReaderRequest("POST", reqURL, strings.NewReader(param.Encode()), "")
	if err != nil {
		return nil, err
	}

	resp, err := s.client.Do(req, nil)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusCreated {
		return nil, fmt.Errorf("error: RequestSimCode: Code was not created")
	}

	uriScanner := bufio.NewScanner(resp.Body)

	for uriScanner.Scan() {
		uri := uriScanner.Text()
		if !strings.HasPrefix(uri, fmt.Sprintf("/api/v0.1/workspace/%s/src-gen:psex:", s.ID)) {
			return nil, fmt.Errorf("error: RequestSimCode: invalid url returned: %s", uri)
		}

		uris = append(uris, uri)
	}

	if err := uriScanner.Err(); err != nil {
		return nil, err
	}

	return
}
